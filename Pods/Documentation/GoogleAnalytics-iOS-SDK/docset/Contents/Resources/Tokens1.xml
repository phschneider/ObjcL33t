<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/GAI.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/GAI</TokenIdentifier>
			<Abstract type="html">Google Analytics iOS top-level class. Provides facilities to create trackers
and set behaviorial flags.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GAI/setDefaultTracker:</TokenIdentifier>
			<Abstract type="html">For convenience, this class exposes a default tracker instance.
This is initialized to nil and will be set to the first tracker that is
instantiated in trackerWithTrackingId:. It may be overridden as desired.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) id&lt;GAITracker&gt; defaultTracker</Declaration>
			
			
			<Anchor>//api/name/defaultTracker</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GAI/defaultTracker</TokenIdentifier>
			<Abstract type="html">For convenience, this class exposes a default tracker instance.
This is initialized to nil and will be set to the first tracker that is
instantiated in trackerWithTrackingId:. It may be overridden as desired.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) id&lt;GAITracker&gt; defaultTracker</Declaration>
			
			
			<Anchor>//api/name/defaultTracker</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GAI/setDebug:</TokenIdentifier>
			<Abstract type="html">If true, Google Analytics debug messages will be logged with NSLog(). This is
useful for debugging calls to the Google Analytics SDK.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL debug</Declaration>
			
			
			<Anchor>//api/name/debug</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GAI/debug</TokenIdentifier>
			<Abstract type="html">If true, Google Analytics debug messages will be logged with NSLog(). This is
useful for debugging calls to the Google Analytics SDK.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL debug</Declaration>
			
			
			<Anchor>//api/name/debug</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GAI/setOptOut:</TokenIdentifier>
			<Abstract type="html">When this is true, no tracking information will be gathered; tracking calls
will effectively become no-ops. When set to true, all tracking information that
has not yet been submitted. The value of this flag will be persisted
automatically by the SDK.  Developers can optionally use this flag to implement
an opt-out setting in the app to allows users to opt out of Google Analytics
tracking.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL optOut</Declaration>
			
			
			<Anchor>//api/name/optOut</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GAI/optOut</TokenIdentifier>
			<Abstract type="html">When this is true, no tracking information will be gathered; tracking calls
will effectively become no-ops. When set to true, all tracking information that
has not yet been submitted. The value of this flag will be persisted
automatically by the SDK.  Developers can optionally use this flag to implement
an opt-out setting in the app to allows users to opt out of Google Analytics
tracking.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL optOut</Declaration>
			
			
			<Anchor>//api/name/optOut</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GAI/setDispatchInterval:</TokenIdentifier>
			<Abstract type="html">If this value is negative, tracking information must be sent manually by
calling dispatch. If this value is zero, tracking information will
automatically be sent as soon as possible (usually immediately if the device
has Internet connectivity). If this value is positive, tracking information
will be automatically dispatched every dispatchInterval seconds.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval dispatchInterval</Declaration>
			
			
			<Anchor>//api/name/dispatchInterval</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GAI/dispatchInterval</TokenIdentifier>
			<Abstract type="html">If this value is negative, tracking information must be sent manually by
calling dispatch. If this value is zero, tracking information will
automatically be sent as soon as possible (usually immediately if the device
has Internet connectivity). If this value is positive, tracking information
will be automatically dispatched every dispatchInterval seconds.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval dispatchInterval</Declaration>
			
			
			<Anchor>//api/name/dispatchInterval</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GAI/setTrackUncaughtExceptions:</TokenIdentifier>
			<Abstract type="html">When set to true, the SDK will record the currently registered uncaught
exception handler, and then register an uncaught exception handler which tracks
the exceptions that occurred using defaultTracker. If defaultTracker is not
nil, this function will track the exception on the tracker and attempt to
dispatch any outstanding tracking information for 5 seconds. It will then call
the previously registered exception handler, if any. When set back to false,
the previously registered uncaught exception handler will be restored.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL trackUncaughtExceptions</Declaration>
			
			
			<Anchor>//api/name/trackUncaughtExceptions</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GAI/trackUncaughtExceptions</TokenIdentifier>
			<Abstract type="html">When set to true, the SDK will record the currently registered uncaught
exception handler, and then register an uncaught exception handler which tracks
the exceptions that occurred using defaultTracker. If defaultTracker is not
nil, this function will track the exception on the tracker and attempt to
dispatch any outstanding tracking information for 5 seconds. It will then call
the previously registered exception handler, if any. When set back to false,
the previously registered uncaught exception handler will be restored.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL trackUncaughtExceptions</Declaration>
			
			
			<Anchor>//api/name/trackUncaughtExceptions</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GAI/sharedInstance</TokenIdentifier>
			<Abstract type="html">Get the shared instance of the Google Analytics for iOS class.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>+ (GAI *)sharedInstance</Declaration>
			
			
			<Anchor>//api/name/sharedInstance</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GAI/trackerWithTrackingId:</TokenIdentifier>
			<Abstract type="html">Create or retrieve a GAITracker implementation with the specified tracking
ID. If the tracker for the specified tracking ID does not already exist, then
it will be created and returned; otherwise, the existing tracker will be
returned. If defaultTracker is not set, it will be set to the tracker instance
returned here.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>- (id&lt;GAITracker&gt;)trackerWithTrackingId:(NSString *)trackingId</Declaration>
			<Parameters>
				<Parameter>
					<Name>trackingId</Name>
					<Abstract type="html">The tracking ID (a string that begins with &quot;UA-&quot;). Must not
be nil or empty.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A GAITracker associated with the specified tracking ID. The tracker
can be used to send tracking data to Google Analytics. The first time this
method is called with a particular tracking ID, the tracker for that tracking
ID will be returned, and subsequent calls with the same tracking ID will return
the same instance. It is not necessary to retain the tracker because the
tracker will be retained internally by the library.

If an error occurs or the tracker ID is not valid, this method will return
nil.</Abstract></ReturnValue>
			<Anchor>//api/name/trackerWithTrackingId:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GAI/dispatch</TokenIdentifier>
			<Abstract type="html">Dispatches any pending tracking information.</Abstract>
			<DeclaredIn>GAI.h</DeclaredIn>			
			
			<Declaration>- (void)dispatch</Declaration>
			
			
			<Anchor>//api/name/dispatch</Anchor>
		</Token>
		
	</File>
</Tokens>